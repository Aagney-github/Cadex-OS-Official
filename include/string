#ifndef _STRING
#define _STRING

#include <string.h>
#include <library/malloc.h>

#include <memory>

namespace std
{
    /* C++ String Class */
    class String
    {
    private:
        char *str;

    public:
        /* Properties */
        int length;

        /**
         * Returns 1 if the string ends with the specified suffix
         * @param suffix The suffix to check
        */
        auto endsWith(char *suffix) -> int
        {
            return strEndsWith(str, suffix);
        }

        /**
         * Returns 1 if the string starts with the specified prefix
         * @param prefix The prefix to check
        */
        auto startsWith(char *prefix) -> int
        {
            return strStartsWith(prefix, str);
        }

        /**
         * Returns the length of the string
        */
        auto getLength() -> int
        {
            return strlen(str);
        }

        /**
         * Sets the value of the string
        */
        auto setValue(char *a) -> void
        {
            str = a;
        }

        /**
         * Creates a new String object with the specified value
         * @param a The value to store in the String object
        */
        String(char *a)
        {
            // Set the value of 'str' to the value of 'a'
            str = a;
        }

        /**
         * Creates a new String object with an empty string
        */
        String()
        {
            str = "";
        }

        /**
         * Returns the value of the stored string
        */
        auto getValue() -> char *
        {
            return str;
        }

        /**
         * Default destructor
        */
        ~String()
        {
            // Free the memory
            // free(str);
        }

        /* Operators */
        auto operator new(unsigned int a) -> void *
        {
            return malloc(a);
        }

        void operator delete(void *a)
        {
            return free(a);
        }
    };
} // namespace std

#endif